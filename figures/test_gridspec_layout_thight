
from datetime import datetime
import os
import sys
import pandas as pd
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
import matplotlib as mpl

import numpy as np
import xarray as xr
#from dotenv import load_dotenv
from mpl_style import CMAP, COLOR_CONGESTUS, COLOR_SHALLOW
import matplotlib.dates as mdates
import matplotlib.ticker as ticker
import metpy.calc as mpcalc
from metpy.units import units
import pdb
from dask.diagnostics import ProgressBar


# Create a figure
fig = plt.figure(figsize=(15, 15))

# Create a GridSpec with 3 rows and 2 columns
subplots = plt.subplots()
gs = subplots[0].add_gridspec(3, 6, height_ratios=[1, 3, 4], width_ratios=[2, 2, 2, 2, 2, 2])

ax0 = fig.add_subplot(gs[0, :])  # First row, spans all columns
ax1 = fig.add_subplot(gs[1, 0])  # Second row, first column, profiles of w
ax2 = fig.add_subplot(gs[1, 1])  # Second row, first column, profiles of w
ax2bis = fig.add_subplot(gs[1, 2])  # Second row, first column, profiles of w
ax3 = fig.add_subplot(gs[1, 3], sharey=ax2)  # Second row, second column profiles of q#
ax4 = fig.add_subplot(gs[1, 4], sharey=ax2)  # Second row, third column profiles of thetav
ax5 = fig.add_subplot(gs[2, 0:3])  # Third row, left plot
ax6 = fig.add_subplot(gs[2, 3:])  # Third row, right plot
gs.tight_layout(fig, h_pad=0.1)
# Adjust layout#
plt.tight_layout()

# Save the figure to a file
fig.savefig('/net/ostro/plots_rain_paper/test_multiplot.png')

pdb.set_trace()

#hours = [0,1,2,3,4,5,6,7,8]
#time_rel_occ = pd.to_datetime(hours, format='%H')
#print(time_rel_occ)
from readers.lcl import read_lcl, read_diurnal_cycle_lcl
from cloudtypes.path_folders import path_diurnal_cycle_arthus, path_paper_plots

from figures.fig03_diurnal_all import prepare_data, statistics



# first row of the plot: relative occurrence of cloud types
# if file does not exist read it
# if file exists read it
if os.path.exists(path_paper_plots+'/ncdf_ancillary_files_QJRMS/' + 'rel_occ_co_diurnal.nc'):
    rel_occ_co_diurnal = xr.open_dataset(path_paper_plots+'/ncdf_ancillary_files_QJRMS/' + 'rel_occ_co_diurnal.nc')
    print('raed file')
else:
    ds = prepare_data()
    ds_stats = statistics(ds)
    rel_occ_co_diurnal=ds_stats["rel_occ_co_diurnal"]
    # convert datarray to netcdf
    rel_occ_co_diurnal.to_netcdf(path_paper_plots+'/ncdf_ancillary_files_QJRMS/' + 'rel_occ_co_diurnal.nc')
    print('file saved')
    

# store 

#time_rel_occ = [np.datetime64('2025-03') + np.timedelta64(rel_occ_co_diurnal.hour.values[i], 'h') for i in range(len(rel_occ_co_diurnal.hour.values))]

# convert time_rel_occ

# first row of plot:  lcl diurnal cycle for the plot
lcl_dc = read_diurnal_cycle_lcl(path_diurnal_cycle_arthus)

print(lcl_dc.time.values)

def create_time(hours, month, year):

    import numpy as np
    import pandas as pd

    hh = np.array(hours)
    base_date =  np.datetime64(f'{year}-{month:02d}-11')

    # Create the datetime64 array with the specified hours
    datetime_array = base_date + pd.to_timedelta(hh, unit='h')
    print(datetime_array)
    
    return datetime_array
time_plot = create_time(rel_occ_co_diurnal.hour.values, 3, 2025)

# convert rel_occ_co_diurnal.hour into a datetime object
# define a figure with ax
fig, ax0 = plt.subplots(figsize=(15, 15))
ax0.plot(lcl_dc.time.values, lcl_dc.lcl_dc.values, linewidth=3, color='black')
ax0.set_title(' a) LCL diurnal cycle', loc='left')
ax0.set_ylabel('Height [m]')
ax0.set_xlabel('Time [hh:mm] (Local time)')
ax0.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
ax0.grid(False)
# set xlim to plot formatted as hh:mm
ax0.set_xlim([lcl_dc.time.values[0], lcl_dc.time.values[-1]])
# add new y axis for cloud relative occurrence
ax0b = ax0.twinx()
ax0b.set_ylabel("Rel. Occ.")
ax0b.set_ylim(0, 0.07)
ax0b.grid(False)
ax0b.plot(
    time_plot,
    rel_occ_co_diurnal.shape.values,
    color='red',
    label="Co",
    linewidth=3
)
fig.savefig('/net/ostro/plots_rain_paper/test)_multiplot.png')

